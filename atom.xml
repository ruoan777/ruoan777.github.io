<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ruoan</title>
  
  
  <link href="https://blog.ruoan777.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.ruoan777.xyz/"/>
  <updated>2025-01-18T10:07:58.845Z</updated>
  <id>https://blog.ruoan777.xyz/</id>
  
  <author>
    <name>Ruoan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认真的提问得到认真的回答，潦草的提问只能得到潦草的回答</title>
    <link href="https://blog.ruoan777.xyz/2025/01/16/%E8%AE%A4%E7%9C%9F%E7%9A%84%E6%8F%90%E9%97%AE%E5%BE%97%E5%88%B0%E8%AE%A4%E7%9C%9F%E7%9A%84%E5%9B%9E%E7%AD%94%EF%BC%8C%E6%BD%A6%E8%8D%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%AA%E8%83%BD%E5%BE%97%E5%88%B0%E6%BD%A6%E8%8D%89%E7%9A%84%E5%9B%9E%E7%AD%94/"/>
    <id>https://blog.ruoan777.xyz/2025/01/16/%E8%AE%A4%E7%9C%9F%E7%9A%84%E6%8F%90%E9%97%AE%E5%BE%97%E5%88%B0%E8%AE%A4%E7%9C%9F%E7%9A%84%E5%9B%9E%E7%AD%94%EF%BC%8C%E6%BD%A6%E8%8D%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%AA%E8%83%BD%E5%BE%97%E5%88%B0%E6%BD%A6%E8%8D%89%E7%9A%84%E5%9B%9E%E7%AD%94/</id>
    <published>2025-01-16T23:31:13.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<p>In order to use a Channel with a Selector you must register the Channel with the Selector. This is done using the SelectableChannel.register() method, like this:</p><p>channel.configureBlocking(false);</p><p>SelectionKey key &#x3D; channel.register(selector, SelectionKey.OP_READ);<br>The Channel must be in non-blocking mode to be used with a Selector. This means that you cannot use FileChannel’s with a Selector since FileChannel’s cannot be switched into non-blocking mode. Socket channels will work fine though.</p><p>Notice the second parameter of the register() method. This is an “interest set”, meaning what events you are interested in listening for in the Channel, via the Selector. There are four different events you can listen for:</p><p>Connect<br>Accept<br>Read<br>Write<br>A channel that “fires an event” is also said to be “ready” for that event. So, a channel that has connected successfully to another server is “connect ready”. A server socket channel which accepts an incoming connection is “accept” ready. A channel that has data ready to be read is “read” ready. A channel that is ready for you to write data to it, is “write” ready.</p><p>These four events are represented by the four SelectionKey constants:</p><p>SelectionKey.OP_CONNECT<br>SelectionKey.OP_ACCEPT<br>SelectionKey.OP_READ<br>SelectionKey.OP_WRITE<br>If you are interested in more than one event, OR the constants together, like this:</p><p>int interestSet &#x3D; SelectionKey.OP_READ | SelectionKey.OP_WRITE;<br>I’ll return to the interest set a bit further down in this text.</p><p>文章中原文描述如下：</p><p>A channel that has data ready to be read is “read” ready. A channel that is ready for you to write data to it, is “write” ready.<br>翻译如下：<br>一个有数据可读的通道可以说是“读就绪”。等待写数据的通道可以说是“写就绪”。<br>感觉中文翻译还是不太准，例如‘读就绪’，到底是channel读buffer还是buffer读channel,哪一种才算channel的‘读就绪’<br>原文里面的data ready to be read  是说有数据可以被读叫‘读就绪’，隐含说明是channle可以被buffer读，即buffer读channel</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a class="link"   href="https://jenkov.com/tutorials/java-nio/selectors.html" >Java NIO Selector<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="http://ifeve.com/selectors/" >Java NIO系列教程（六） Selector<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In order to use a Channel with a Selector you must register the Channel with the Selector. This is done using the SelectableChannel.regis</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java 虚拟线程</title>
    <link href="https://blog.ruoan777.xyz/2023/12/02/java-%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/"/>
    <id>https://blog.ruoan777.xyz/2023/12/02/java-%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-12-02T15:56:32.000Z</published>
    <updated>2025-01-18T10:07:58.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/virtual1.png" alt="virtual1"><br><img src="/images/virtual2.png" alt="virtual2"><br><img src="/images/virtual3.png" alt="virtual3"><br><img src="/images/virtual4.png" alt="virtual4"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>0心智负担，0监控负担，0新增语法负担，低成本的完美并发解决方案<br>有栈协程，就是协程上下文包括了callstack，当IO完成、恢复上下的时候，连带着callstack恢复。那么对于callstack中的各个caller（调用者）和callee（被调用者），都感知不到整个协程的调用过程，自然代码就不用修改了。<br>有栈协程的优点就是不需要现有的代码改动太多，只需要调度单位创建+调度器+IO操作方面改动即可。但开发者的把控就比较弱，不能干涉调度过程。<br>Go和Java的Loom，都是有栈协程。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>非CPU密集型可以支持优化，但对CPU密集型提升有限</li><li>ThreadLocal的使用需要注意，不再适合放很重的内容，否则在虚拟线程新增百万级时，很容易触发系统oom</li><li>G1 GC支持不友好，易引发StackOverflow</li><li>Synchornized-&gt;Lock</li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul><li><a class="link"   href="https://juejin.cn/post/7161017761399832612" >什么是Java的Project Loom？<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.zhihu.com/question/549661510" >如果java虚拟线程稳定了，是不是有一大批框架和工具要重写？<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.bilibili.com/video/BV1Ae411Z7vN/?spm_id_from=333.999.list.card_archive.click&vd_source=d1e47215533d4398f358efc66526ec8d" >jdk 并发编程的终极解决方案：虚拟线程｜Scala &amp; Java Meetup<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/virtual1.png&quot; alt=&quot;virtual1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/virtual2.png&quot; alt=&quot;virtual2&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/virtual3.png&quot; alt</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基于FutureTask的无参Future.get()监控</title>
    <link href="https://blog.ruoan777.xyz/2023/11/25/%E5%9F%BA%E4%BA%8EFutureTask%E7%9A%84%E6%97%A0%E5%8F%82Future-get-%E7%9B%91%E6%8E%A7/"/>
    <id>https://blog.ruoan777.xyz/2023/11/25/%E5%9F%BA%E4%BA%8EFutureTask%E7%9A%84%E6%97%A0%E5%8F%82Future-get-%E7%9B%91%E6%8E%A7/</id>
    <published>2023-11-25T15:01:58.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司某部门最近又发生了一次RCA，在给SRE同步原因时提到，事件原因为在使用线程池的时候，存在嵌套使用的场景，父子任务触发循环阻塞等待，导致机器被卡死宕机。<br>和美团的一篇技术文章所提供的demo非常类似:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ExecutorService</span> threadPool1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">CompletableFuture</span> cf1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//do sth</span>    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> d d        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"child"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> threadPool1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子任务</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> threadPool1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> cf1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如上代码块所示，doGet方法第三行通过 <code>supplyAsync</code> 向 <code>threadPool1</code> 请求线程，并且内部子任务又向 <code>threadPool1</code> 请求线程。 <code>threadPool1</code> 大小为10，当同一时刻有10个请求到达，则<code>threadPool1</code>被打满，子任务请求线程时进入阻塞队列排队，但是父任务的完成又依赖于子任务，这时由于子任务得不到线程，父任务无法完成。主线程执行<code>cf1.join()</code>进入阻塞状态，并且永远无法恢复。<br>为了修复该问题，需要将父任务与子任务做线程池隔离，两个任务请求不同的线程池，避免循环依赖导致的阻塞。</p><p>除了如上的父子任务嵌套线程池使用，还有一个原因是使用<code>submit</code>向线程池提交任务后，使用的<code>future.get()</code>方法阻塞获取任务执行结果时，未使用超时时间控制，导致异常发生时任务迟迟不肯释放线程。<br>所以就有同学提出，如何对这种情况进行监控？</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureGetCheckTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> executorName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FutureGetCheckTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">FutureGetCheckTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> callable<span class="token punctuation">,</span> <span class="token class-name">String</span> executorName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executorName <span class="token operator">=</span> executorName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>        val dtpProperties <span class="token operator">=</span> <span class="token class-name">ApplicationContextHolder</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DtpProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CollectorHandler</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"futureGetWithoutTimeLimit"</span><span class="token punctuation">,</span> <span class="token string">"poolName"</span><span class="token punctuation">,</span> executorName<span class="token punctuation">)</span><span class="token punctuation">,</span> dtpProperties<span class="token punctuation">.</span><span class="token function">getCollectorTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DtpExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadPoolExecutor</span>        <span class="token keyword">implements</span> <span class="token class-name">SpringExecutor</span><span class="token punctuation">,</span> <span class="token class-name">TaskEnhanceAware</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">FutureGetCheckTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureGetCheckTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>callable<span class="token punctuation">,</span> <span class="token function">getThreadPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureGetCheckTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">callable</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getThreadPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>核心代码就是上面这么简单，将 <code>ThreadPoolExecutor</code> 的 <code>submit()</code> 方法里面的 <code>newTaskFor</code> 方法进行重写，将默认的 <code>RunnableFuture</code> 接口的实现类 FutureTask 进行增强，改为使用 <code>FutureGetCheckTask</code> ，那么所有的 <code>Future.get()</code> 无参方法调用都会被委派到 <code>FutureGetCheckTask</code> 里面的 <code>get()</code> 方法，然后我们在这个方法里面进行对应的埋点，即可将应用代码中的的调用进行记录。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExecutorService</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @throws RejectedExecutionException &#123;@inheritDoc&#125;     * @throws NullPointerException       &#123;@inheritDoc&#125;     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;公司某部门最近又发生了一次RCA，在给SRE同步原因时提到，事件原因为在使用线程池的时候，存在嵌套使用的场景，父子任务触发循环阻塞等待，导致</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>再谈Java里面的生命周期与初始化</title>
    <link href="https://blog.ruoan777.xyz/2023/10/21/%E5%86%8D%E8%B0%88Java%E9%87%8C%E9%9D%A2%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://blog.ruoan777.xyz/2023/10/21/%E5%86%8D%E8%B0%88Java%E9%87%8C%E9%9D%A2%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2023-10-21T18:18:28.000Z</published>
    <updated>2025-01-18T10:07:58.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>工作日的某天，同事喊我帮忙排查一个问题，在应用引入了动态线程池组件之后，点火点不起来了。<br>简单确认了下应用的java版本、spring boot版本、动态线程池的配置，发现没啥问题，于是决定拉代码到本地，debug看看点火失败的原因。</p><h3 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h3><p>本地拉到代码一debug，可以重现问题，并且有对应的堆栈。顺藤摸瓜找到了这样的一个方法<br><img src="/images/ignite_fail_code.jpg" alt="点火失败案例"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">XXXService</span> service<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token class-name">ThreadPoolUtil</span><span class="token punctuation">.</span><span class="token function">getLocalCacheExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"i am dynamic-tp-test-1 task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> localCacheExecutor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> redisExecutor<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        localCacheExecutor <span class="token operator">=</span> <span class="token class-name">DtpRegistry</span><span class="token punctuation">.</span><span class="token function">getDtpExecutor</span><span class="token punctuation">(</span><span class="token string">"XXXXXXXXXXXXXXXXx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisExecutor <span class="token operator">=</span> <span class="token class-name">DtpRegistry</span><span class="token punctuation">.</span><span class="token function">getDtpExecutor</span><span class="token punctuation">(</span><span class="token string">"YYYYYYYYYYYYYYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token function">getLocalCacheExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> localCacheExecutor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>第一张图中的<code>Class.forName</code>, 遍历了代码中的所有类，直接导致了<code>TestController</code>的 “类初始化”，那么就会触发静态变量<code>threadPoolExecutor</code>的初始化，间接的触发了<code>ThreadPoolUtil</code>的 “类初始化”，则其静态代码块也将被调用，然而，那个<code>DalTransactionEnabler</code> ，本质上是一个<code>ImportBeanDefinitionRegistrar</code>，也就是说，这个时候还在<code>BeanDefinition</code>的导入阶段，动态线程池实例并没有生成，所以在动态线程池组件中获取的时候会失败，抛出异常导致应用点火失败。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>将<code>TestController</code>里面的静态变量移除，改为使用注入动态线程池实例的方式，或者将静态方法获取动态线程池 部分移动到业务方法内部，这样可以取保调用静态方法的时候，一定能获取到动态线程池实例（因为这个时候应用已经完成了点火）。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>注意区分类的“初始化” 和 <code>Bean</code> 的“初始化”。<br><code>Class.forName</code> 触发的是“类初始化”，此步骤会导致类的静态变量、静态代码块先后被执行，但是构造方法不一定会执行。构造方法的执行时机是在【类的<code>Class</code>实例 -&gt; 生成<code>Bean</code>对象】的生命周期中才会出现的，对应的是<code>Bean</code>生命周期中的“实例化”。</p><p>附：<br><code>Bean</code>的生命周期：实例化-&gt;属性赋值-&gt;初始化-&gt;销毁<br>类加载相关的生命周期：一个类型从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历加载 （Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initializ ation）、使用（Using）和卸载（Unloading）七个阶段，其中验证、准备、解析三个部分统称为连接（Linking）<br>类的初始化：贴一段描述过来<br>类的初始化阶段是类加载过程的最后一个步骤。在进行准备阶段时，变量已经赋过一次系统要求的初始零值，而在初始化阶段，则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。更直接的说，初始化阶段就是执行类构造器<cinit>()方法的过程。</p><p><clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问。<br><clinit>()方法与类的构造函数（即在虚拟机视角中的实例构造器<init>()方法）不同，它不需要显式地调用父类构造器，Java虚拟机会保证在子类的<clinit>()方法执行前，父类的<clinit>()方法已经执行完毕。因此在Java虚拟机中第一个被执行的<clinit> ()方法的类型肯定是java.lang.Object 。<br>由于父类的<clinit>()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。<br><clinit>()方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。<br>接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成 <clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法， 因为只有当父接口中定义的变量被使用时，父接口才会被初始化。此外，接口的实现类在初始化时也 一样不会执行接口的<clinit>()方法。<br>Java虚拟机必须保证一个类的<clinit>()方法在多线程环境中被正确地加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行完毕<clinit>()方法。如果在一个类的<clinit>()方法中有耗时很长的操作，那就可能造成多个线程阻塞，不过在某个线程执行完<clinit>()后，其他线程都不会再执行<clinit>()方法。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a class="link"   href="https://juejin.cn/post/7075168883744718856" >Spring Bean生命周期，好像人的一生。。<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.sukaidev.top/2021/03/30/d90e9b80/" >Java 的类加载<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/jj-chenjunjie/p/5331107.html" >Java（静态）变量和（静态）代码块的执行顺序<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/berber78/article/details/46472789" >java的static块执行时机<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;工作日的某天，同事喊我帮忙排查一个问题，在应用引入了动态线程池组件之后，点火点不起来了。&lt;br&gt;简单确认了下应用的java版本、spring</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Apollo 配置中心学习</title>
    <link href="https://blog.ruoan777.xyz/2023/08/26/Apollo-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.ruoan777.xyz/2023/08/26/Apollo-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-08-26T18:21:40.000Z</published>
    <updated>2025-01-18T10:07:58.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="apollo架构整体架构"><a href="#apollo架构整体架构" class="headerlink" title="apollo架构整体架构"></a>apollo架构整体架构</h4><p><img src="/images/apollo-overall-architecture.png" alt="apollo架构"><br>文末有一篇剖析文章，通过演进的方式，说明了为什么要这么设计。</p><h4 id="apollo的客户端如何收到实时变更的消息"><a href="#apollo的客户端如何收到实时变更的消息" class="headerlink" title="apollo的客户端如何收到实时变更的消息"></a>apollo的客户端如何收到实时变更的消息</h4><p>这个是配置中心的核心功能，官方的文档也给出了详细的介绍，这里重点讲几个注意的点。</p><ol><li>为什么使用 Eureka 作为注册中心</li></ol><ul><li>它提供了完整的Service Registry和Service Discovery实现<ul><li>首先是提供了完整的实现，并且也经受住了Netflix自己的生产环境考验，相对使用起来会比较省心。</li></ul></li><li>和Spring Cloud无缝集成<ul><li>我们的项目本身就使用了Spring Cloud和Spring Boot，同时Spring Cloud还有一套非常完善的开源代码来整合Eureka，所以使用起来非常方便。另外，Eureka还支持在我们应用自身的容器中启动，也就是说我们的应用启动完之后，既充当了Eureka的角色，同时也是服务的提供者。这样就极大的提高了服务的可用性。这一点是我们选择Eureka而不是zk、etcd等的主要原因，为了提高配置中心的可用性和降低部署复杂度，我们需要尽可能地减少外部依赖。</li></ul></li><li>Open Source<ul><li>最后一点是开源，由于代码是开源的，所以非常便于我们了解它的实现原理和排查问题。</li></ul></li></ul><ol start="2"><li>当配置发生变更时，Admin Service在配置发布后，需要通知所有的 Config Service有配置发布，从而Config Service可以通知对应的客户端来拉取最新的配置。<br>但是这个过程没有使用消息中间件来作解耦，而是自行实现了一套通过db存储消息，通过数据库实现了一个简单的消息队列，然后由Config Service 轮询的方式实现。<br>主要原因是为了尽可能减少外部依赖。</li><li>client 客户端通过长轮询的方式与服务端进行通信，其内部使用了Spring DeferredResult，是一个比较有意思的功能<br>其原理参见文末的文章解析。</li></ol><h4 id="关于启动的流程分析"><a href="#关于启动的流程分析" class="headerlink" title="关于启动的流程分析"></a>关于启动的流程分析</h4><p><code>apollo client</code>包下面的 <code>spring.factories</code> 文件里面，有这样的配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span>EnableAutoConfiguration</span><span class="token operator">=</span>\<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>ApolloAutoConfiguration</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>ApplicationContextInitializer</span><span class="token operator">=</span>\<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>ApolloApplicationContextInitializer</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span>EnvironmentPostProcessor</span><span class="token operator">=</span>\<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>ApolloApplicationContextInitializer</span></code></pre><p>我们知道， <code>spring boot</code>应用点火的时候，会自动扫描到<code>spring.factories</code> 文件 并对里面配置的 <code>bean</code> 进行加载<br>那么重点看 <code>ApolloApplicationContextInitializer</code> 里面的 <code>initialize</code> 方法，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">PropertySourcesConstants</span><span class="token punctuation">.</span><span class="token constant">APOLLO_BOOTSTRAP_ENABLED</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Apollo bootstrap config is not enabled for context &#123;&#125;, see property: $&#123;&#123;&#125;&#125;"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token class-name">PropertySourcesConstants</span><span class="token punctuation">.</span><span class="token constant">APOLLO_BOOTSTRAP_ENABLED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Apollo bootstrap config is enabled for context &#123;&#125;"</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">initialize</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>注意这里判断了应用有没有开启 bootstrap config，如果开启了，就会在spring容器上下文加载的时候就初始化apollo相关的配置（即initialize方法里面，会遍历获取应用的各个namespace，从apollo 远端的configService加载到配置后，会将配置放在当前的environment中）<br>核心方法为</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> namespace <span class="token operator">:</span> namespaceList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//apollo触发加载远程配置的入口，这里遍历应用名下的所有namespace，然后利用 ConfigService 的 getConfig 方法开始加载</span>  <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token class-name">ConfigService</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>  composite<span class="token punctuation">.</span><span class="token function">addPropertySource</span><span class="token punctuation">(</span>configPropertySourceFactory<span class="token punctuation">.</span><span class="token function">getConfigPropertySource</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当然，还有一种启动方式，是使用 <code>apollo-client</code> 包提供的  <code>@EnableApolloConfig</code> 注解，其内部的核心是加载下面这个类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApolloConfigRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApolloConfigRegistrarHelper</span> helper <span class="token operator">=</span> <span class="token class-name">ServiceBootstrap</span><span class="token punctuation">.</span><span class="token function">loadPrimary</span><span class="token punctuation">(</span><span class="token class-name">ApolloConfigRegistrarHelper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 用于向应用内注入一些apollo环境下的核心bean   */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    helper<span class="token punctuation">.</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里先是利用了SPI加载了 <code>ApolloConfigRegistrarHelper</code> 类的具体实现 <code>DefaultApolloConfigRegistrarHelper</code>, 然后借用该类向容器中注入各种bean，核心的有 PropertySourcesProcessor 和 ApolloAnnotationProcessor ，用来让apollo 启动的时候处理应用中的apollo相关的配置（注解、注册监听器等工作）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">AnnotationAttributes</span><span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableApolloConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> namespaces <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> order <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resolvedNamespaces <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveNamespaces</span><span class="token punctuation">(</span>namespaces<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">PropertySourcesProcessor</span><span class="token punctuation">.</span><span class="token function">addNamespaces</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>resolvedNamespaces<span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> propertySourcesPlaceholderPropertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// to make sure the default PropertySourcesPlaceholderConfigurer's priority is higher than PropertyPlaceholderConfigurer</span>  propertySourcesPlaceholderPropertyValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BeanRegistrationUtil</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionIfNotExists</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>          propertySourcesPlaceholderPropertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BeanRegistrationUtil</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionIfNotExists</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">AutoUpdateConfigChangeListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//core</span>  <span class="token class-name">BeanRegistrationUtil</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionIfNotExists</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">PropertySourcesProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此类会处理Apollo内置得两个重要得注解：</span>  <span class="token comment">// ApolloConfig：用在属性上，注入指定namespace对应得Config；</span>  <span class="token comment">// ApolloConfigChangeListener：用在方法上，用来监听指定得namespace对应得key，原理就是通过创建namespace对应得监听器ConfigChangeListener，反射调用方法实现配置推送</span>  <span class="token class-name">BeanRegistrationUtil</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionIfNotExists</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">ApolloAnnotationProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BeanRegistrationUtil</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionIfNotExists</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">SpringValueProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BeanRegistrationUtil</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionIfNotExists</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">SpringValueDefinitionProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a class="link"   href="https://www.apolloconfig.com/#/zh/design/apollo-design" >apollo 架构设计<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://mp.weixin.qq.com/s/-hUaQPzfsl9Lm3IqQW3VDQ" >微服务架构~携程Apollo配置中心架构剖析<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="http://blog.zollty.com/b/archive/about-spring-deferredresult-and-servlet3-async-request.html" >关于Spring DeferredResult的作用和Servlet 3的异步处理请求<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://cloud.tencent.com/developer/article/2123898" >DeferredResult解决了什么问题<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/theRhyme/p/10846349.html" >DEFERREDRESULT使用方式和场景<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.jianshu.com/p/1bcdd6fe5447" >Apollo配置中心之apollo-client模块源码分析<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;apollo架构整体架构&quot;&gt;&lt;a href=&quot;#apollo架构整体架构&quot; class=&quot;headerlink&quot; title=&quot;apollo架构整体架构&quot;&gt;&lt;/a&gt;apollo架构整体架构&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/apollo-overa</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="Apollo" scheme="https://blog.ruoan777.xyz/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>反爬虫系统-验证码交互流程</title>
    <link href="https://blog.ruoan777.xyz/2023/06/03/%E5%8F%8D%E7%88%AC%E8%99%AB%E7%B3%BB%E7%BB%9F-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B/"/>
    <id>https://blog.ruoan777.xyz/2023/06/03/%E5%8F%8D%E7%88%AC%E8%99%AB%E7%B3%BB%E7%BB%9F-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B/</id>
    <published>2023-06-03T13:47:53.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反爬2-0系统架构-验证码交互流程"><a href="#反爬2-0系统架构-验证码交互流程" class="headerlink" title="反爬2.0系统架构-验证码交互流程"></a>反爬2.0系统架构-验证码交互流程</h4><p><img src="/images/captcha.png" alt="captcha"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;反爬2-0系统架构-验证码交互流程&quot;&gt;&lt;a href=&quot;#反爬2-0系统架构-验证码交互流程&quot; class=&quot;headerlink&quot; title=&quot;反爬2.0系统架构-验证码交互流程&quot;&gt;&lt;/a&gt;反爬2.0系统架构-验证码交互流程&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="反爬" scheme="https://blog.ruoan777.xyz/tags/%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 实战必知</title>
    <link href="https://blog.ruoan777.xyz/2023/05/04/Mysql-%E5%AE%9E%E6%88%98%E5%BF%85%E7%9F%A5/"/>
    <id>https://blog.ruoan777.xyz/2023/05/04/Mysql-%E5%AE%9E%E6%88%98%E5%BF%85%E7%9F%A5/</id>
    <published>2023-05-04T23:56:20.000Z</published>
    <updated>2025-01-18T10:07:58.843Z</updated>
    
    <content type="html"><![CDATA[<p>-<img src="/images/mysql.png" alt="mysql架构图"></p><h4 id="Mysql的两种日志-REDO-LOG-和-BINLOG"><a href="#Mysql的两种日志-REDO-LOG-和-BINLOG" class="headerlink" title="Mysql的两种日志-REDO LOG 和 BINLOG"></a>Mysql的两种日志-REDO LOG 和 BINLOG</h4><ul><li><p>关于WAL，维基百科上的解释：In computer science, write-ahead logging (WAL) is a family of techniques for providing atomicity and durability (two of the ACID properties) in database systems. The changes are first recorded in the log, which must be written to stable storage, before the changes are written to the database. In a system using WAL, all modifications are written to a log before they are applied. Usually both redo and undo information is stored in the log. WAL：对数据库的改变必须先记录在日志里，然后同步到数据库中中。可以实现ACID中的原子性和持久性。 redo log：1）作为WAL的一种实现，在断电的情况下实现原子性和持久性；2）将对数据库操作的随机IO转换为顺序IO，以及通过组提交的方式提高mysql的IO效率。 参考文献： 1）<a class="link"   href="https://en.wikipedia.org/wiki/Write-ahead_logging" >https://en.wikipedia.org/wiki/Write-ahead_logging<i class="fas fa-external-link-alt"></i></a> 2）<a class="link"   href="https://developer.aliyun.com/article/617776" >https://developer.aliyun.com/article/617776<i class="fas fa-external-link-alt"></i></a></p></li><li><p>快速问答：</p></li></ul><ol><li>redo log的概念是什么? 为什么会存在.</li><li>什么是WAL(write-ahead log)机制, 好处是什么.</li><li>redo log 为什么可以保证crash safe机制.</li><li>binlog的概念是什么, 起到什么作用, 可以做crash safe吗? </li><li>binlog和redolog的不同点有哪些? </li><li>物理一致性和逻辑一直性各应该怎么理解? </li><li>执行器和innoDB在执行update语句时候的流程是什么样的?</li><li>如果数据库误操作, 如何执行数据恢复?</li><li>什么是两阶段提交, 为什么需要两阶段提交, 两阶段提交怎么保证数据库中两份日志间的逻辑一致性(什么叫逻辑一致性)?</li><li>如果不是两阶段提交, 先写redo log和先写bin log两种情况各会遇到什么问题?</li></ol><ul><li>Answer</li></ul><ol><li>redo log是重做日志。主要用于MySQL异常重启后的一种数据恢复手段，确保了数据的一致性。归根到底是MySQL为了实现WAL机制的一种手段。因为MySQL进行更新操作，为了能够快速响应，所以采用了异步写回磁盘的技术，写入内存后就返回。但是会存在crash后内存数据丢失的隐患，而redo log具备crash safe能力。</li><li>WAL机制是写前日志，也就是MySQL更新操作后在真正把数据写入到磁盘前先记录日志。好处是不用每一次操作都实时把数据写盘，就算crash后也可以通过redo log重放恢复，所以能够实现快速响应SQL语句。</li><li>因为redo log是每次更新操作完成后，就一定会写入的，如果写入失败，这说明此次操作失败，事务也不可能提交。redo log内部结构是基于页的，记录了这个页的字段值变化，只要crash后读取redo log进行重放就可以恢复数据。（因为redo log是循环写的，如果满了InnoDB就会执行真正写盘）</li><li>bin log是归档日志，属于MySQL Server层的日志。可以起到全量备份的作用。当需要恢复数据时，可以取出某个时间范围内的bin log进行重放恢复。但是bin log不可以做crash safe，因为crash之前，bin log可能没有写入完全MySQL就挂了。所以需要配合redo log才可以进行crash safe。</li><li>bin log是Server层，追加写，不会覆盖，记录了逻辑变化，是逻辑日志。redo log是存储引擎层，是InnoDB特有的。循环写，满了就覆盖从头写，记录的是基于页的物理变化，是物理日志，具备crash safe操作。</li><li>前者是数据的一致性，后者是行为一致性。</li><li>执行器在优化器选择了索引后，调用InnoDB读接口，读取要更新的行到内存中，执行SQL操作后，更新到内存，然后写redo log，写bin log，此时即为完成。后续InnoDB会在合适的时候把此次操作的结果写回到磁盘。</li><li>数据库在某一天误操作，就可以找到距离误操作最近的时间节点前的bin log，重放到临时数据库里，然后选择当天误删的数据恢复到线上数据库。</li><li>两阶段提交就是对于三步操作而言：1.prepare阶段 2. 写入bin log 3. commit<br>redo log在写入后，进入prepare状态，然后bin log写入后，进入commit状态，事务可以提交。<br>如果不用两阶段提交的话，可能会出现bin log写入之前，机器crash导致重启后redo log继续重放crash之前的操作，而当bin log后续需要作为备份恢复时，会出现数据不一致的情况。所以需要对redo log进行回滚。<br>如果是bin log commit之前crash，那么重启后，发现redo log是prepare状态且bin log完整（bin log写入成功后，redo log会有bin log的标记），就会自动commit，让存储引擎提交事务。</li><li>先写redo log，crash后bin log备份恢复时少了一次更新，与当前数据不一致。先写bin log，crash后，由于redo log没写入，事务无效，所以后续bin log备份恢复时，数据不一致。</li></ol><h4 id="索引的常见类型"><a href="#索引的常见类型" class="headerlink" title="索引的常见类型"></a>索引的常见类型</h4><ul><li>哈希表： 适用于等值查询的场景，不适合做区间查询</li><li>有序数组：在等值查询和范围查询场景中的性能就都非常优秀，但是在更新数据时非常麻烦，所以只适用于静态存储引擎</li><li>二叉搜索树：每个节点的左儿子小于父节点，父节点又小于右儿子。适合快速检索、更新操作</li><li>N 叉树：查询过程访问尽量少的数据块，避免频繁与磁盘进行交互。</li></ul><p>索引是在存储引擎层实现的，其实现的核心就是基于这些数据模型的。</p><h4 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a><code>InnoDB</code> 的索引模型</h4><p>表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为<strong>索引组织表</strong>。每一个索引在 <code>InnoDB</code> 里面对应一棵 B+ 树。<br>根据叶子节点的内容，索引类型分为主键索引和非主键索引。<br>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引 (clustered index)。<br>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引 (secondary index)。</p><p>select * from T where ID&#x3D;500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树;<br>select * from T where k&#x3D;5，即普通索引查询方式，则需要先搜索 k 索引 树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。<br>基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><p>哪些场景下应该使用自增主键，而哪些场景下不应该?</p><blockquote><p>比如身份证号的场景，那么身份证就不适合用作主键，因为二级索引的叶子节点上需要存储主键的值，如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节。<br>有没有什么场景适合用业务字段直接做主键的呢？典型的 KV 场景，就可以使用业务字段作为自增主键，这种情况下，表中只有一个索引，且该索引为唯一索引。</p></blockquote><p>覆盖索引：select ID from T where k between 3 and 5。在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p><blockquote><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p></blockquote><p>最左前缀原则:<br>这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。<br>不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索.</p><blockquote><p>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p></blockquote><p>索引下推原则：</p><blockquote><p>MySQL 5.6 引入的索引下推优化(index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p></blockquote><h4 id="怎么减少行锁对性能对影响"><a href="#怎么减少行锁对性能对影响" class="headerlink" title="怎么减少行锁对性能对影响"></a>怎么减少行锁对性能对影响</h4><p>两阶段锁协议：在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。<br>死锁和死锁检测：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;  show  variables like &#39;innodb_lock_wait_timeout&#39;;+--------------------------+-------+| Variable_name            | Value |+--------------------------+-------+| innodb_lock_wait_timeout | 50    |+--------------------------+-------+1 row in set (0.03 sec)</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;  show  variables like &#39;innodb_deadlock_detect&#39;;+------------------------+-------+| Variable_name          | Value |+------------------------+-------+| innodb_deadlock_detect | ON    |+------------------------+-------+1 row in set (0.01 sec)</code></pre><p>当进入到死锁状态后，有两种方式可以处理</p><ul><li>一种策略是，直接进入等待，直到超时；</li><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。</li></ul><p>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放</p><h4 id="唯一索引与普通索引的选择"><a href="#唯一索引与普通索引的选择" class="headerlink" title="唯一索引与普通索引的选择"></a>唯一索引与普通索引的选择</h4><h5 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h5><p>两种索引在面对查询过程时的表现相差不大，对于普通索引，查找到满足条件的第一个记录以后，还要看一下下一个记录，是否也符合查询条件。<br>对于唯一索引，因为索引已经定义了唯一性，那么只要查找到一个记录，就可以立即返回。<br>由于InnoDB 的数据是按数据页为单位来读写的，所以对于普通索引的查找下一个，一般这条记录已经在内存中了，所以计算平均性能差异的时候，这一步额外的操作可以忽略不计。</p><h5 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h5><p>change buffer的概念：当需要更新一个数据的时候，如果这个数据在内存中则直接更新，如果不在，则先将更新操作缓存在change buffer中，在下一次查询需要访问数据页的时候，将数据页读取到缓存，然后执行change buffer中与这个数据页相关的操作，从而将变更的内容同步到数据页。</p><h4 id="MYSQL-一些常用的性能优化技巧"><a href="#MYSQL-一些常用的性能优化技巧" class="headerlink" title="MYSQL 一些常用的性能优化技巧"></a>MYSQL 一些常用的性能优化技巧</h4><ul><li>如果对字段做了函数计算，就用不上索引了，这是 <code>MySQL</code> 的规定。对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</li><li>注意Mysql的隐式类型转换，可能会导致索引失效。<ul><li><code>select * from tradelog where tradeid=110717</code>; (tradeid 的字段类型是 varchar(32)，而输入的参数却是整型，所以需要做类型转换。)</li></ul></li></ul><h4 id="快照在MVCC里面是怎么工作的？"><a href="#快照在MVCC里面是怎么工作的？" class="headerlink" title="快照在MVCC里面是怎么工作的？"></a>快照在MVCC里面是怎么工作的？</h4><p>Multiversion Concurrency Control，简称MVCC。多版本并发控制。</p><ol><li>什么是视图数组？<ul><li>InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。</li></ul></li><li>视图数组和事务id分别是在什么时候创建的？<ul><li>假设T1时刻start transaction ，T2时刻执行一条DML，T3时刻执行一条查询语句</li><li>那么事务ID是在T2时刻创建的，而一致性视图与视图数组是在T3时刻创建的</li><li>结论：视图数组是在事务需要一致性视图的时候才创建的。而事务的id是事务在执行第一条DML语句的时候创建的。</li></ul></li><li>关于高水位与低水位<ul><li>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。</li><li>注意，注意此处低水位和高水位的区别。 低水位：数组内事务ID最小值。 高水位：当前系统已经创建的事务id的最大值+1（并不是数组内的最大） 低水位是【数组内】 高水位【系统内】</li><li>视图数组中为什么有比自己小的，比自己大的，甚至有不连续的，原因具体如下：<ul><li>对于视图数组中比自己小的transaction id事务，说明人家在T2时刻之前就已经申请完事务id了，只不过人家执行的比较久，T3时刻之后还没执行完成，因此就会存在小于自己的transaction id，简单来说就是来的比自己早，执行的又比较久。 </li><li>对于视图数组中比自己大的transaction id事务，说明人家是在T2到T3之间创建的事务id，你T2时刻执行DML，此时可能很多别的事务进来了，由于事务id的申请是严格递增，所以他们的id比你大，你T3执行（生成视图数组）的时候就会看到它们。 </li><li>视图数组还可能是不连续的，这很容易理解，很可能存在一些申请事务id比较早的但执行比较久的，同时存在一些申请没那么早但执行很快的事务，这样中间就会有一些执行完不再活跃的事务，不会被记录到视图数组</li></ul></li></ul></li></ol><p>附一个简单的例子:<br>视图是在事务第一个查询语句才产生的。<br>举个例子：<br>begin<br>    update A<br>    update B<br>    select C<br>commit<br>这个时候事务id是在update A开始时申请的，假设为95；<br>在update A到select C之间会有新的事务开始，假设有3个事务开始了，事务id分别为96，97，98，事务96是个短事务，在创建一致性视图时可能已经提交了，所以在执行select C的时候创建视图数组就为[95，97，98]。<br>高水位为99，低水位为95。<br>当前事务可以看到&lt;&#x3D;95的提交，96的提交也能看到，而看不到97，大于98事务的提交。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a class="link"   href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&mid=2247484041&idx=1&sn=76d3bf1772f9e3c796ad3d8a089220fa&chksm=f9b784b8cec00dae3d52318f6cb2bdee39ad975bf79469b72a499ceca1c5d57db5cbbef914ea&token=2025456560&lang=zh_CN#rd" >MySQL索引那些事<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/6844904073955639304" >联合索引在B+树上的存储结构及数据查找方式<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://developer.aliyun.com/article/617776" >[图解MySQL]MySQL组提交(group commit)<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://heapdump.cn/article/3890459" >3000帧动画图解MySQL为什么需要binlog、redo log和undo log<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/finalkof1983/article/details/88063328" >mysql锁系列之MDL元数据锁之一<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;img src=&quot;/images/mysql.png&quot; alt=&quot;mysql架构图&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Mysql的两种日志-REDO-LOG-和-BINLOG&quot;&gt;&lt;a href=&quot;#Mysql的两种日志-REDO-LOG-和-BINLOG&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="mysql" scheme="https://blog.ruoan777.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>small tips</title>
    <link href="https://blog.ruoan777.xyz/2023/04/01/small-tips/"/>
    <id>https://blog.ruoan777.xyz/2023/04/01/small-tips/</id>
    <published>2023-04-01T16:09:21.000Z</published>
    <updated>2025-01-18T10:07:58.844Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ul><li><a class="link"   href="https://blog.csdn.net/wq6ylg08/article/details/114106272" >Git问题解决方案:不建议在没有为偏离分支指定合并策略时执行pull操作<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/selfteaching/the-craft-of-selfteaching/issues/67" >Github进行fork后如何与原仓库同步：重新fork很省事，但不如反复练习版本合并 #67<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/6975540294351585294" >Java测试框架系列：PowerMock使用系列-3：抑制不想要的行为<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/column/6975524747413028900" >Java测试框架系列<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/u012175512/article/details/105858132" >Git revert 某次merge后再重新 merge代码被丢失(第一次想merge的代码再也merge不上了)<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://gitirc.eu/howto/revert-a-faulty-merge.html" >How to revert a faulty merge<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/justry_deng/article/details/98665086" >Maven依赖关系原则与冲突解决办法(含必杀技)<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/aspirant/p/8532962.html" >举Maven 3-Maven依赖版本冲突的分析及解决小结举例<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/xianyu110/awesome-chatgpt-project" >Chatgpt 使用指南<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://developer.aliyun.com/article/1027746" >安全同学讲Maven间接依赖场景的仲裁机制<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="http://itmyhome.com/spring/expressions.html" >8. Spring 表达式语言 (SpEL)<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/wq6ylg08/article/d</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次线程池死锁问题排查</title>
    <link href="https://blog.ruoan777.xyz/2023/03/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://blog.ruoan777.xyz/2023/03/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2023-03-18T15:41:16.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一个工作日的傍晚，突然收到im软件的【动态线程池运行告警】，一看是活跃度告警，看具体的告警信息，是说线程池的活跃线程都跑满了，<br><img src="/images/dynamictp3.png" alt="线程池运行告警"><br><img src="/images/dynamictp4.png" alt="线程池运行告警"><br>一看是测试环境，所以悬着的心先放一半，不是生产就好@。@</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>正准备看看监控到底是啥情况，发现im软件又来了一条，仔细一看，除了告警的时间，其余告警参数和上面的一毛一样。<br>这不对啊，难不成是动态线程池组件bug了？<br>再仔细看看参数，核心线程数10，最大线程数30，队列长度50，而活跃线程数也是30，队列剩余容量是0。说明线程池已经彻底被打满，这种情况一般是因为有突发流量导致，但是上面的疑问还是没有解决，为什么间隔了2min，收到的告警里面参数却依然不变呢？如果是这段时间线程池未收到任何新的任务，那么老的任务为啥还没有被执行完呢。</p><h3 id="线程堆栈"><a href="#线程堆栈" class="headerlink" title="线程堆栈"></a>线程堆栈</h3><p>带着这些疑问，直接进监控页面，获取线程的当前堆栈看看能不能找到蛛丝马迹。<br>如果没有相应的工具，一般的做法是登陆机器，使用 <code>jstack</code> 等命令对线程进行 <code>dump</code> ，但大部分大厂应该都不会用这么原始方式吧？一般都会封装一些成熟都监控软件，使用可视化的界面，点点点几下就能拿到堆栈了。从监控当中，拿到的问题机器的问题线程堆栈如下。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">-</span> waiting on <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span>$<span class="token class-name">Signaller</span><span class="token annotation punctuation">@42d05867</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">175</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span>$<span class="token class-name">Signaller</span><span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1707</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ForkJoinPool</span><span class="token punctuation">.</span><span class="token function">managedBlock</span><span class="token punctuation">(</span><span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3323</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span><span class="token punctuation">.</span><span class="token function">waitingGet</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1742</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1908</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span><span class="token constant">XXXX</span><span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>WorkerWrapper<span class="token punctuation">.</span><span class="token function">beginNext</span><span class="token punctuation">(</span><span class="token class-name">WorkerWrapper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">207</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span><span class="token constant">XXXX</span><span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>WorkerWrapper<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">WorkerWrapper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span><span class="token constant">XXXX</span><span class="token punctuation">.</span>async<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>WorkerWrapper<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">WorkerWrapper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">160</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span><span class="token constant">XXXX</span><span class="token punctuation">.</span>async<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>Async<span class="token punctuation">.</span>lambda$beginWork$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">Async</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span><span class="token constant">XXXX</span><span class="token punctuation">.</span>async<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>Async$$<span class="token class-name">Lambda</span>$<span class="token number">2509</span><span class="token operator">/</span><span class="token number">628700883.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span>$<span class="token class-name">AsyncRun</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1640</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>ttl<span class="token punctuation">.</span></span>TtlRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TtlRunnable</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>dtp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>support<span class="token punctuation">.</span>runnable<span class="token punctuation">.</span></span>DtpRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DtpRunnable</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">27</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>dianping<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span>CatWrappedRunnable</span><span class="token punctuation">.</span>lambda$run$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">CatWrappedRunnable</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>dianping<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span>CatWrappedRunnable</span>$$<span class="token class-name">Lambda</span>$<span class="token number">116</span><span class="token operator">/</span><span class="token number">1721617934.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>dianping<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span>CatAsyncSupportTemplate</span><span class="token punctuation">.</span><span class="token function">doExecute4Simple</span><span class="token punctuation">(</span><span class="token class-name">CatAsyncSupportTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">147</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>dianping<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span>CatAsyncSupportTemplate</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">CatAsyncSupportTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">94</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>dianping<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span>CatWrappedRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CatWrappedRunnable</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">29</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1149</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span></code></pre><p>线程的状态显示在<code>WAITING</code>。</p><p>虽说是等待状态，但是一般来讲，线程池的线程会停留在 <code>ThreadPoolExecutor</code> 的 <code>getTask</code> 方法处，等待从阻塞队列获取任务。</p><pre class="language-java" data-language="java"><code class="language-java">at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting on <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>AbstractQueuedSynchronizer</span>$<span class="token class-name">ConditionObject</span><span class="token annotation punctuation">@23c000a1</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">175</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>AbstractQueuedSynchronizer</span>$<span class="token class-name">ConditionObject</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2039</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ScheduledThreadPoolExecutor</span>$<span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1088</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ScheduledThreadPoolExecutor</span>$<span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">809</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1074</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1134</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span></code></pre><p>而这里有点奇怪，阻塞在了 <code>CompletableFuture</code> 的 <code>get</code> 方法。再之前的 <code>WorkerWrapper</code> 是我使用了京东开源的一个任务编排组件，见文后的链接。<br>经过一系列的源码排查，发现其使用了线程池嵌套的方式对任务对进行处理，当线程池的线程被父任务打满，那么父任务新开的子任务就不得不进入线程池的阻塞队列进行排队，从而导致父任务在等待子任务的执行，而子任务因为所有的线程都被父任务占用，无法从阻塞队列中出队，导致发生死锁。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 进行下一个任务 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beginNext</span><span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">,</span> <span class="token keyword">long</span> now<span class="token punctuation">,</span> <span class="token keyword">long</span> remainTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//花费的时间</span>    <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextWrappers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextWrappers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nextWrappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>executorService<span class="token punctuation">,</span> <span class="token class-name">WorkerWrapper</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> remainTime <span class="token operator">-</span> costTime<span class="token punctuation">,</span> forParamUseWrappers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token punctuation">]</span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span>nextWrappers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextWrappers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>        futures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> nextWrappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>executorService<span class="token punctuation">,</span> <span class="token class-name">WorkerWrapper</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> remainTime <span class="token operator">-</span> costTime<span class="token punctuation">,</span> forParamUseWrappers<span class="token punctuation">)</span><span class="token punctuation">,</span> executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul><li>获取异步任务的执行结果，必须加上超时时间，这样至少不会导致程序一直假死</li><li>不要使用嵌套的异步任务，或者嵌套任务不要获取子任务结果，不要阻塞主任务</li><li>主任务和子任务的线程池拆分成两个线程池池，不要使用同一个线程池（推荐）</li></ul><p>文末美团的文章当中，也提到线程池循环引用会导致死锁</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ExecutorService</span> threadPool1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">CompletableFuture</span> cf1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//do sth</span>    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"child"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> threadPool1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子任务</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> threadPool1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> cf1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>如上代码块所示，doGet方法第三行通过`supplyAsync`向`threadPool1`请求线程，并且内部子任务又向threadPool1请求线程。threadPool1大小为<span class="token number">10</span>，当同一时刻有<span class="token number">10</span>个请求到达，则 `threadPool1`被打满，子任务请求线程时进入阻塞队列排队，但是父任务的完成又依赖于子任务，这时由于子任务得不到线程，父任务无法完成。主线程执行cf1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进入阻塞状态，并且永远无法恢复。为了修复该问题，需要将父任务与子任务做线程池隔离，两个任务请求不同的线程池，避免循环依赖导致的阻塞。</code></pre><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a class="link"   href="https://gitee.com/jd-platform-opensource/asyncTool" >京东零售 &#x2F; asyncTool<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://gitee.com/jd-platform-opensource/asyncTool/commit/87dd12e449a52ddae683dd725f50c5f2b100800d" >线程不足导致卡死的问题<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html" >CompletableFuture原理与实践-外卖商家端API的异步化<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一个工作日的傍晚，突然收到im软件的【动态线程池运行告警】，一看是活跃度告警，看具体的告警信息，是说线程池的活跃线程都跑满了，&lt;br&gt;&lt;im</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="线程池" scheme="https://blog.ruoan777.xyz/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>动态线程池组件落地</title>
    <link href="https://blog.ruoan777.xyz/2023/03/05/%E5%8A%A8%E6%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%BB%84%E4%BB%B6%E8%90%BD%E5%9C%B0/"/>
    <id>https://blog.ruoan777.xyz/2023/03/05/%E5%8A%A8%E6%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%BB%84%E4%BB%B6%E8%90%BD%E5%9C%B0/</id>
    <published>2023-03-05T13:36:25.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>有一段时间没有写文章了。<br>主要原因是年后的工作一直很忙，几乎天天加班到10点，甚至周末也要全天加班，实在没空更新blog。<br>部门年前发生一个一级的生产事故，某核心服务生产突发宕机，无法短时间恢复，影响了用户的正常访问。事后复盘下来，与线程池的不当使用存在一定的联系。<br>因此，部门开展了一系列高可用review，其中有一个重要part就是针对线程池进行专题分析。由于我之前研究过这个，于是自告奋勇把这个活揽到我头上。</p><h4 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h4><p>对于线程池的使用，我认为主要分两块，一个是需要有一个机制，对线程池的运行状态进行监控，另一个就是要基于这些监控的结果，对线程池的核心参数进行合理的、便捷的调整。这两部分我们目前都是缺失的。<br>之前我写过一个文章，研究过一个开源的动态线程池组件<a class="link"   href="https://github.com/longtai-cn/hippo4j" >Hippo-4J<i class="fas fa-external-link-alt"></i></a>，这次在此基础上又完整调研了一次，发现了另一个目前比较活跃的组件<a class="link"   href="https://github.com/dromara/dynamic-tp" >Dynamic tp<i class="fas fa-external-link-alt"></i></a>。花了两天的时间完整研读了下其实现源码，发现实现比较轻量，也提供了多种SPI接口供使用方拓展，同时也有多维度的告警通知机制，非常适合我们的项目。</p><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>在准备引入并集成到公司的环境时，发现了一系列棘手的问题。</p><ol><li>开源项目对<code>Spring Boot</code>组件的要求是版本&gt;&#x3D; <code>2.x</code> ，然而事实是，组内的项目大部分是 <code>1.5.x</code> 版本。这时只有两个选择，一个是升级组内的<code>Spring Boot</code>版本，另一个是考虑降级开源组件的<code>Spring Boot</code>版本。路子一显然风险太大，因为我们的版本是写死在framework组件中的，要升级恐怕多个应用都会受影响，带来的改动量是无法估计的，这条路几乎走不通。考虑到我对<code>DynamicTp</code>源码很熟悉了，所以大胆一点，决定直接引入源码进行魔改，对源码<code>Spring Boot</code>版本依赖进行降级。</li><li>引入源码魔改遇到了第二个问题，源码的核心功能【远程配置文件和本地线程池的参数绑定】是基于<code>Spring Boot</code> 2.x的 <code>org.springframework.boot.context.properties.bind.Binder</code>做的，那也就意味着这个功能得重新做。</li><li>开源组件支持的配置中心基本囊括了主流的配置中心，包括<code>Nacos、Apollo、Zookeeper、Consul、Etcd、Polaris</code>，但遗憾，公司用的是自研的配置中心，所以这个得单独去支持。</li><li>开源组件提供的通知告警组件，支持了企业微信、钉钉、飞书、邮件报警，但遗憾，公司用的IM软件也是自研的，这部分也得单独开发。</li><li>另一个比较尴尬的问题是，配置中心发生参数变更后，会通知到每一个实例，那么每一个实例都会发出一条变更消息。这样当部署的机器非常多的时候，应用的owner会同时被多条变更信息进行了消息轰炸，用户体验会比较差，这也是需要优化的。</li></ol><h4 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h4><p>落地过程中，踩了一系列的踩坑，比如注入bean失败、动态配置无法生效、版本依赖冲突严重、和业务应用水土不服等等。<br>不过总算之前的源码没白读，遇到问题一步一步debug，都一一克服了。<br>这里提一个小细节吧，在测试阶段一切正常，发布到生产环境发现了一个让我啼笑皆非到情况，变更一次配置后，im软件会一次收到非常多的消息通知。<br>这个时候才突然想起来，配置的更新是按照实例来的，每一次变更，每一个实例都可以收到消息并进行参数变更，并发出<code>mq</code>消息。<br>所以为了避免对接入方进行消息轰炸，额外做了一个mq消息的压制功能。<br>具体做法是单独起一个服务，接收实例发出的mq消息，然后对消息的核心参数进行拼接，生成一个分布式的key，利用 <code>redis</code> 的 <code>setnx</code> 命令实现一把简易的分布式锁。<br>这样，只有一个实例的消息可以成功获取锁，继而发出im消息给到用户。</p><h4 id="待扩展实现"><a href="#待扩展实现" class="headerlink" title="待扩展实现"></a>待扩展实现</h4><p>集团使用的配置中心，如何和dtp整合是个大麻烦，目前侵入源码的实现不太优雅，研究了 <code>SpringBoot</code> 的 <code>ApplicationContextInitializer</code> <code>机制，PropertySourceLocator</code> 机制等扩展点后，有了一些新的想法。<br>比如可以自行实现一个 <code>QconigApplicationContextInitializer</code> ，继承 <code>EnvironmentPostProcessor</code> 和 <code>ApplicationContextInitializer</code> , 将读取配置中心配置的工作放在这里面，在应用准备 <code>Environment</code> 的环节就将远程配置的文件内容读取到当前应用的上下文。<br>然后可能需要改造   <code>PropertiesBinder</code> 里面的方法，反正在这里已经可以读取到配置的内容了，可以使用类似于深拷贝的方式进行配置的绑定。</p><h4 id="组件启动顺序"><a href="#组件启动顺序" class="headerlink" title="组件启动顺序"></a>组件启动顺序</h4><p><img src="/images/dynamictp7.png" alt="组件功能架构"></p><p><img src="/images/dynamictp6.png" alt="组件启动顺序"></p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/dynamictp8.png" alt="线程池参数变更通知"></p><p><img src="/images/dynamictp9.png" alt="线程池运行告警"></p><p>还有 <code>ClickHouse</code> 的日志记录，及 <code>Metrics</code> 监控埋点，这里因为要打的码太多，担心会泄露公司信息，就不贴截图了。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a class="link"   href="https://github.com/dromara/dynamic-tp" >Dynamic tp<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7164283773318594597#heading-0" >这些不知道，别说你熟悉 Nacos，深度源码解析！<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7105968458851942414" >这个队列的思路是真的好 MemorySafeLinkedBlockingQueue<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7152369961120301069#heading-3" >这些不知道，别说你熟悉 Spring<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7098299623759937543#heading-8" >一文读懂 Spring Environment<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/u014486725/article/details/119404113" >Spring中Environment的使用(封装工具类)<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/weixin_45994575/article/details/124596081" >ApplicationContextInitializer的理解和使用<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/yhahaha_/article/details/88578431" >SpringBoot（三）使用EnvironmentPostProcessor接口加载外部配置文件<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/6857890075477278734" >Spring扩展-3-SmartLifecycle<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7280429214608146490?utm_source=gold_browser_extension" >别再纠结线程池池大小、线程数量了，哪有什么固定公式 | 京东云技术团队<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/yangyongjie/p/15839713.html#!comments" >Netty时间轮-HashedWheelTimer<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;有一段时间没有写文章了。&lt;br&gt;主要原因是年后的工作一直很忙，几乎天天加班到10点，甚至周末也要全天加班，实在没空更新blog。&lt;br&gt;部门</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="线程池" scheme="https://blog.ruoan777.xyz/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java中方法和字段名的最大长度限制</title>
    <link href="https://blog.ruoan777.xyz/2022/11/06/Java%E4%B8%AD%E6%96%B9%E6%B3%95%E5%AD%97%E6%AE%B5%E5%90%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/"/>
    <id>https://blog.ruoan777.xyz/2022/11/06/Java%E4%B8%AD%E6%96%B9%E6%B3%95%E5%AD%97%E6%AE%B5%E5%90%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/</id>
    <published>2022-11-06T16:05:10.000Z</published>
    <updated>2025-01-18T10:07:58.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个题目，猛的一看是不是很简单，直接谷歌不就得了，谷歌告诉我的结果是不能超过64KB英文字符，问题回答结束？no no no。这个问题背后有很多”八股文“，要想既知其然又知其所以然，我们需要先学习一些关于JVM对类文件结构的约束。</p><h3 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h3><p>字节码是平台无关性和语言无关性的基础，而JAVA语言的成功，离不开一个稳定的字节码存储结构—“Class文件”。任何一门程序语言能够取得商业上的成功，<br>都不可能去做升级版本后，旧版本编译的产品就不再能够运行这种事情。</p><p>Class文件格式中只有两种基本的数据类型：无符号数+表。无符号数属于基本的数据类型，用u1,u2,u4等分别表示1个字节，2个字节，4个字节的无符号数。<br>表是由多个无符号数或其它表作为数据项构成的复杂数据类型。</p><h4 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h4><p>四个字节的magic number, “CAFEBABE” </p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>2个字节的次版本号+2个字节的主版本号</p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>是Class类文件结构中，最繁琐的一部分。不过本文题目的答案，就藏在这里面。<br>常量池中常量的数量是不固定的，所以入口的头两个字节用于存放常量池容量记数值。<br>剩余部分就是具体的常量值，分两类：字面量和符号引用。</p><ul><li>字面量就是文本字符串、被声明为final的常量值等。</li><li>符号引用属于编译原理方面的概念，包含以下几类常量<ul><li>被模块导出或者开放的包</li><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li><li>方法句柄和方法类型</li><li>动态调用点和动态常量</li></ul></li></ul><p>常量池中每一项常量都是一个表，表的类型有17种。这17种表都有一个共同的特点，表结构的其实第一位是一个u1类型的标识位，代表着当前常量是这17种当中的哪一个。<br>之所以说常量池是最繁琐的一部分，就是因为这个17种常量类型各自有着完全独立的数据结构，而且两两之间还没有什么共性和联系，只能一个一个地去分析。</p><p>为了解决本文题目的问题，我们就分析以下其中的第一种，“CONSTANT_Utf8_info” UTF-8编码的字符串。其结构如下:</p><table><thead><tr><th align="left">类型</th><th align="left">名称</th><th align="left">数量</th></tr></thead><tbody><tr><td align="left">u1</td><td align="left">tag</td><td align="left">1</td></tr><tr><td align="left">u2</td><td align="left">length</td><td align="left">1</td></tr><tr><td align="left">u1</td><td align="left">bytes</td><td align="left">length</td></tr></tbody></table><p>这里length占用类两个字节，而Class文件中方法、字段都需要引用“CONSTANT_Utf8_info”型常量来描述名称，所以“CONSTANT_Utf8_info”型常量的最大长度也就是java中方法、字段名的最大长度—-也就是u2类型能表达的最大值2^16-1&#x3D;65535。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>所以java程序中如果定义了超过65535个字符长度的变量或者方法名，即使规则和全部字符都是合法的，也会无法编译。<br>眼见为实，我们实际试试看看</p><p><img src="/images/constant_length.png" alt="测试变量长度的限制"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="">深入理解JAVA虚拟机</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个题目，猛的一看是不是很简单，直接谷歌不就得了，谷歌告诉我的结果是不能超过64KB英文字符，问题回答结束？no no no。这个问题背后有</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="类文件结构" scheme="https://blog.ruoan777.xyz/tags/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>实现一把分布式锁</title>
    <link href="https://blog.ruoan777.xyz/2022/08/13/%E5%AE%9E%E7%8E%B0%E4%B8%80%E6%8A%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://blog.ruoan777.xyz/2022/08/13/%E5%AE%9E%E7%8E%B0%E4%B8%80%E6%8A%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2022-08-13T15:51:42.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>项目中需要用到分布式锁，看了下以前的实现，通过 <code>redis</code> 的 <code>setex</code> 等命令实现一个比较简单的版本，但其实，这样的实现有很多因素没有考虑到，包括但不限于以下的一些因素</p><ol><li>原子性</li><li>可重入</li><li>可阻塞</li><li>可续期</li><li>可过期</li><li>异常处理机制</li><li>完善的监控</li></ol><p>很显然， <code>setex</code> 只能说实现了分布式锁的基本功能。</p><h4 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h4><p>调研了下公司已有的实现，发现框架部门提供了一个很不错的实现，基本上上述的点都有考虑到。不过用法比较麻烦，要通过硬编码的方式 <code>try-catch-finally</code> ，个人不太喜欢这样的方式，所以花了半天的时间，通过 <code>aop</code> 对其进行了封装，使得用起来非常简单。核心代码非常简单，如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributeLockAspect</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DefaultParameterNameDiscoverer</span> <span class="token constant">NAME_DISCOVERER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SpelExpressionParser</span> <span class="token constant">PARSER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DistributedLockService</span> distributedLockService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.ustc.ruoan.framework.lock.DistributeLock)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCutMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointCutMethod()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DistributeLock</span> annotation <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">DistributeLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> preFix <span class="token operator">=</span> <span class="token function">getPreFix</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">preFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token function">getDistributeLockKey</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> method<span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">DLock</span> dLock <span class="token operator">=</span> distributedLockService<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>preFix <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            locked <span class="token operator">=</span> dLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>locked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DistlockRejectedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DistlockRejectedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"distributedLockService_locked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token class-name">BizException</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">,</span> <span class="token string">"too many operations in a short period of time."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>locked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 默认使用uid作为lockKey，也支持将spEl表达式解析的结果作为lockKey     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getDistributeLockKey</span><span class="token punctuation">(</span><span class="token class-name">DistributeLock</span> annotation<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">lockLey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">UidResolver</span><span class="token punctuation">.</span><span class="token function">getUidService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DistributeLock</span> annotation<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> spEl <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">lockLey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>spEl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNames <span class="token operator">=</span> <span class="token constant">NAME_DISCOVERER</span><span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> spEl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant">PARSER</span><span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>spEl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPreFix</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">String</span> preFix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>preFix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> preFix<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>它里面使用的默认锁粒度，是用户的 <code>uid</code> 。考虑到不同项目获取 <code>uid</code> 的方式不一样，所以提供了一个 <code>spi</code> 接口让各应用自己去兼容</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GetUidInterface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取uid的方法，由各应用自行实现     *     * @return uid     * @throws Exception     */</span>    <span class="token class-name">String</span> <span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UidResolver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GetUidInterface</span> uidService<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        uidService <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">GetUidInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> loader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"module distribute-lock spi has no impl, type:"</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GetUidInterface</span> <span class="token function">getUidService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> uidService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="锁续期是怎么实现的"><a href="#锁续期是怎么实现的" class="headerlink" title="锁续期是怎么实现的"></a>锁续期是怎么实现的</h4><p>基本原理: 在获取到分布式锁的时候，会同步起一个定时任务，每5秒去尝试主动续期一次，如果发现要续期的锁还没有被释放，则将其ttl重新设置为30s.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @param keys = [key] * @param argv = [ttl(default=30s), val] * * if redis.hasKey(key) and redis.hexists(key, val):         // key already exists *     redis.pexpire(key, ttl)                               // extends the ttl *     return true * else:                                                    // means current thread is not holding the key *     return false * */</span><span class="token function">RENEWAL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then "</span> <span class="token operator">+</span>                <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span>                <span class="token string">"return 1; "</span> <span class="token operator">+</span>                <span class="token string">"end; "</span> <span class="token operator">+</span>                <span class="token string">"return 0;"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"RENEWAL"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="加锁的原子性怎么保证"><a href="#加锁的原子性怎么保证" class="headerlink" title="加锁的原子性怎么保证"></a>加锁的原子性怎么保证</h4><p>通过redis对lua script的支持保证原子性</p><h4 id="锁的可重入怎么实现"><a href="#锁的可重入怎么实现" class="headerlink" title="锁的可重入怎么实现"></a>锁的可重入怎么实现</h4><ul><li>使用了 redis hash set数据结构 </li><li>相同lock-value的加锁次数累计加1 </li><li>解锁的时候加锁次数减1，为0的时候删除key</li></ul><h4 id="持有锁的机器重启怎么办，会让锁无法释放吗？"><a href="#持有锁的机器重启怎么办，会让锁无法释放吗？" class="headerlink" title="持有锁的机器重启怎么办，会让锁无法释放吗？"></a>持有锁的机器重启怎么办，会让锁无法释放吗？</h4><p>不会，默认设置redis的key为30秒，业务服务器重启后redis会过期</p><h4 id="锁过期是怎么实现的"><a href="#锁过期是怎么实现的" class="headerlink" title="锁过期是怎么实现的"></a>锁过期是怎么实现的</h4><p>lock后 unlock前 不管业务逻辑之行多长时间会一直刷新key的过期时间<br>刷新直到 1.unlock；2. DLock 对象被回收<br>基本原理:</p><ol><li>获取锁的线程主动释放锁<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @param keys = [key, namespace] * @param argv = [key, ttl(default=30s), val] * * if not redis.hasKey(key):                                  // key already deleted *     redis.publish(namespace, key) *     return 2 * elif redis.hasKey(key) and not redis.hexists(key, val):   // means current thread is not obligated for the key *     return 3 * redis.del(key) * redis.publish(namespace, key) * return 0 * */</span><span class="token function">UNLOCK</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"if (redis.call('exists', KEYS[1]) == 0) then "</span>                <span class="token operator">+</span> <span class="token string">"redis.call('publish', KEYS[2], ARGV[1]); "</span>                <span class="token operator">+</span> <span class="token string">"return 2; "</span>                <span class="token operator">+</span> <span class="token string">"end;"</span>                <span class="token operator">+</span> <span class="token string">"if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then "</span>                <span class="token operator">+</span> <span class="token string">"return 3;"</span>                <span class="token operator">+</span> <span class="token string">"end; "</span>                <span class="token operator">+</span> <span class="token string">"redis.call('del', KEYS[1]); "</span>                <span class="token operator">+</span> <span class="token string">"redis.call('publish', KEYS[2], ARGV[1]); "</span>                <span class="token operator">+</span> <span class="token string">"return 0; "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"UNLOCK"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li><li>锁对象销毁，但没有显示调用unlock方法，这时候会通过 AutoCloseable 的机制，自动调用close方法，然后在close方法里面做锁的释放操作<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h4 id="锁阻塞获取怎么实现的"><a href="#锁阻塞获取怎么实现的" class="headerlink" title="锁阻塞获取怎么实现的"></a>锁阻塞获取怎么实现的</h4><p>利用 <code>redis</code> 的 <code>pub/sub</code> 机制来传递锁被释放的消息，相关的 <code>topic</code> 为 <code>namespace</code> ，所传递的消息内容为 <code>key</code> 。<br>具体来说，当一个线程阻塞获取锁时，如果它发现锁已经被另一个线程占用了，那么它会阻塞等待另一个线程释放锁。<br>另一个锁解锁的时候，会在 <code>topic</code> 上发布消息；消息的消费方接收到消息后，会通过信号量通知等待锁的线程。</p><p><code>tryLock()</code> 的代码获取锁失败会等待信号量，因此基本上得到锁的线程能够在第一时间内获取到锁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;项目中需要用到分布式锁，看了下以前的实现，通过 &lt;code&gt;redis&lt;/code&gt; 的 &lt;code&gt;setex&lt;/code&gt; 等命令实现一</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="redis" scheme="https://blog.ruoan777.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>先有Class还是先有Object?</title>
    <link href="https://blog.ruoan777.xyz/2022/08/07/%E5%85%88%E6%9C%89Class%E8%BF%98%E6%98%AF%E5%85%88%E6%9C%89Object/"/>
    <id>https://blog.ruoan777.xyz/2022/08/07/%E5%85%88%E6%9C%89Class%E8%BF%98%E6%98%AF%E5%85%88%E6%9C%89Object/</id>
    <published>2022-08-07T18:42:38.000Z</published>
    <updated>2025-01-18T10:07:58.844Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>刷知乎的时候看到了一个有趣的问题，</p><pre class="language-none"><code class="language-none">先有Class还是先有Object？Java的对象模型中：所有的类都是Class类的实例，Object是类，那么Object也是Class类的一个实例。所有的类都最终继承自Object类，Class是类，那么Class也继承自Object。这就像是先有鸡还是先有蛋的问题，请问实际中JVM是怎么处理的？此外，可能的话，介绍一下其它面向对象语言是怎么处理这个问题的。</code></pre><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><p><img src="/images/Class&Object.png" alt="Class&amp;Object"></p><p>另一个答主纠正了问题答表述<br><img src="/images/class_correct.png" alt="class_correct"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a class="link"   href="https://www.zhihu.com/question/30301819" >先有Class还是先有Object？<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;刷知乎的时候看到了一个有趣的问题，&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java IO 详解</title>
    <link href="https://blog.ruoan777.xyz/2022/06/15/Java-IO-%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.ruoan777.xyz/2022/06/15/Java-IO-%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-06-15T23:33:07.000Z</published>
    <updated>2025-01-18T10:07:58.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开一篇总结下Java IO 相关的知识，给自己挖个大坑，慢慢填。</p><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p>同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。BIO方式适用于连接数目比小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中， jDK1.4以前的唯一选择，但程序简单易理解。</p><h4 id="BIO-的第一种简易实现"><a href="#BIO-的第一种简易实现" class="headerlink" title="BIO 的第一种简易实现"></a>BIO 的第一种简易实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.请求与服务端的Socket对象连接</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2. 得到一个打印流</span>            <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3. 使用循环不断的发送消息给服务端接收</span>            <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请说:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> msg <span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> ps<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 目标:服务端可以实现同时接收多个客户端的Socket通信需求 * 思路:服务端没接收到一个客户端socket请求对象之后都交给一个独立的线程来处理客户端的数据交互需求*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token comment">//1.注册端口</span>            <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2.定义一个死循环，负责不断的接收客户端的Socket的连接请求 while(true)&#123;</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3.创建一个独立的线程来处理与这个客户端的socket通信需求 new ServerThreadReader(socket).start();</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerThreadReader</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerThreadReader</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从socket对象中得到一个字节输入流</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//使用缓存字符输入流包装字节输入流</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> msg<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li>每个Socket接收到，都会创建一个线程，线程的竞争、切换上下文影响性能;</li><li>每个线程都会占用栈空间和CPU资源; </li><li>并不是每个socket都进行lO操作，无意义的线程处理; </li><li>客户端的并发访问增加时，服务端将呈现1:1的线程开销，访问量越大，系统将发生线程栈溢出，线程创建失败，最终导致进程宕机或者僵死，从而不能对外提供服务。</li></ul><h4 id="BIO-的第二种进阶实现"><a href="#BIO-的第二种进阶实现" class="headerlink" title="BIO 的第二种进阶实现"></a>BIO 的第二种进阶实现</h4><p>上面一种方式每来一个请求都会创建一个线程去处理，那么自然而然我们就可以想到改用线程池来优化，避免资源的耗尽。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerRunnableTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerRunnableTarget</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//处理接收到的客户端socket通信需求 </span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.从socket管道中得到一个字节输入流对象</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//2.把字节输入流包装成一个缓存字符输入流</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">String</span> msg<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端收到:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 目标:开发实现伪异步通讯架构* 思路:服务端没接收到一个客户端socket请求对象之后都交给一个独立的线程来处理客户端的数据交互需求 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.注册端口</span>            <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//2.定义一个死循环，负责不断的接收客户端的Socket的连接请求 </span>            <span class="token comment">//初始化一个线程池对象</span>            <span class="token class-name">HandlerSocketServerPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerSocketServerPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//3.把socket对象交给一个线程池进行处理 </span>                <span class="token comment">//把socket封装成一个任务对象交给线程池处理</span>                <span class="token class-name">Runnable</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerRunnableTarget</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h5><ul><li>伪异步采用了线程池实现，因此避免了为每个请求创建一个独立线程造成线程资源耗尽的问题，但由于底层依然是采用的同步阻塞模型，因此无法从根本上解决问题。</li><li>如果单个消息处理比较缓慢，或者服务器线程池中的全部线程都被阻塞，那么后续socket的I&#x2F;O消息 都将在队列中排队。新的Socket请求将被拒绝，客户端会发生大量连接超时。</li></ul><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><h4 id="NIO-的一种阻塞模式实现"><a href="#NIO-的一种阻塞模式实现" class="headerlink" title="NIO 的一种阻塞模式实现"></a>NIO 的一种阻塞模式实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 为服务器通道绑定端口</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用户存放连接的集合</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收连接</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 没有连接时，会阻塞线程</span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 循环遍历集合中的连接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 处理通道中的数据</span>                    <span class="token comment">// 当通道中没有数据可读时，会阻塞线程</span>                    channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="NIO-的一种非阻塞模式实现-上面实现的进阶版，把获取连接和读取数据的过程由阻塞设置为非阻塞"><a href="#NIO-的一种非阻塞模式实现-上面实现的进阶版，把获取连接和读取数据的过程由阻塞设置为非阻塞" class="headerlink" title="NIO 的一种非阻塞模式实现-上面实现的进阶版，把获取连接和读取数据的过程由阻塞设置为非阻塞"></a>NIO 的一种非阻塞模式实现-上面实现的进阶版，把获取连接和读取数据的过程由阻塞设置为非阻塞</h4><ul><li>当然缺点也是显而易见的，while(true)中的代码，会使CPU一直处于忙碌状态<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 为服务器通道绑定端口</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用户存放连接的集合</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收连接</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 设置为非阻塞模式，没有连接时返回null，不会阻塞线程</span>                server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 通道不为空时才将连接放入到集合中</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 循环遍历集合中的连接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 处理通道中的数据</span>                    <span class="token comment">// 设置为非阻塞模式，若通道中没有数据，会返回0，不会阻塞线程</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="NIO-的一种非阻塞模式实现-利用Selector"><a href="#NIO-的一种非阻塞模式实现-利用Selector" class="headerlink" title="NIO 的一种非阻塞模式实现-利用Selector"></a>NIO 的一种非阻塞模式实现-利用Selector</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOServer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、当客户端连接服务端时，服务端会通过ServerSocketChannel得到SocketChannel:1.获取通道</span>        <span class="token class-name">ServerSocketChannel</span> ssChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、切换非阻塞模式</span>        ssChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、绑定连接</span>        ssChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、获取选择器</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5、将通道注册到选择器上，并且指定“监听接收事件”</span>        ssChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.轮询式的获取选择器上已经“准备就绪”的事件</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新的一轮事件处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//7. 获取当前选择器中所有注册的“选择键(已就绪的监听事件)“</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//8.获取准备”就绪“的事件</span>                <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//9.判断具体是什么事件准备就绪</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//10.若”接收就绪“，获取客户端连接</span>                    <span class="token class-name">SocketChannel</span> sChannel <span class="token operator">=</span> ssChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//11.切换非阻塞模式</span>                    sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//12.将该通道注册到选择器上</span>                    sChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//13.获取当前选择器上”读就绪“状态的通道</span>                    <span class="token class-name">SocketChannel</span> sChannel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//14.读取数据</span>                    <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> sChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//15.取消选择键SelectionKey</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、获取通道</span>        <span class="token class-name">SocketChannel</span> sChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、切换非阻塞模式</span>        sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、分配指定大小的缓存区</span>        <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、发送数据给服务端</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//关闭通道</span>        sChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="NIO-中的粘包半包处理"><a href="#NIO-中的粘包半包处理" class="headerlink" title="NIO 中的粘包半包处理"></a>NIO 中的粘包半包处理</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHalf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟粘包+半包</span>    buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hello,world\nI'm Ruoan\nHo"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用split函数处理</span>    <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"w are you?\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 切换为读模式</span>    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历寻找分隔符</span>        <span class="token comment">// get(i)不会移动position</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 缓冲区长度</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将前面的内容写入target缓冲区</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 将buffer中的数据写入target中</span>                target<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 打印查看结果</span>            <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 切换为写模式，但是缓冲区可能未读完，这里需要使用compact</span>    buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a class="link"   href="https://segmentfault.com/a/1190000003063859" >Linux IO模式及 select、poll、epoll详解<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/historyasamirror/article/details/5778378" >IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/6844903636422623240#heading-5" >【NIO系列】——之Reactor模型<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#7%E3%80%81%E4%BC%98%E5%8C%96" >Netty学习之NIO基础<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/mrmirror/p/13587311.html" >深入学习redis 的线程模型<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;开一篇总结下Java IO 相关的知识，给自己挖个大坑，慢慢填。&lt;/p&gt;
&lt;h3 id=&quot;BIO&quot;&gt;&lt;a href=&quot;#BIO&quot; class</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Web协议详解与抓包</title>
    <link href="https://blog.ruoan777.xyz/2022/06/04/Web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85/"/>
    <id>https://blog.ruoan777.xyz/2022/06/04/Web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85/</id>
    <published>2022-06-04T17:29:01.000Z</published>
    <updated>2025-01-18T10:07:58.843Z</updated>
    
    <content type="html"><![CDATA[<h4 id="评估Web架构的7大属性"><a href="#评估Web架构的7大属性" class="headerlink" title="评估Web架构的7大属性"></a>评估Web架构的7大属性</h4><ul><li>性能<ul><li>网络性能<ul><li>吞吐量: 小于等于带宽</li><li>开销: 首次开销 每次开销</li></ul></li><li>用户感知到的性能<ul><li>延迟: 发起请求到接收到响应的时间</li><li>完成时间: 完成一个应用动作所花费的时间</li></ul></li><li>网络效率<ul><li>重用缓存、减少交互次数、数据传输距离更近、COD(按需代码)</li></ul></li></ul></li><li>可伸缩性: 支付部署可以互相交互的大量组件</li><li>简单性: 易理解 易实现 易验证</li><li>可见性: 对于两个组件间的交互进行监视和仲裁的能力</li><li>可移植性: 在不同环境下运行的能力</li><li>可靠性: 出现部分故障 对整体影响的程度</li><li>可修改性: 修改的难易, 由进化性, 可定制性, 可扩展性, 可配置性, 可重用性构成<ul><li>可进化性: 一个组件独立升级而不影响其他组件</li><li>可拓展性: 向系统添加功能, 而不影响到其他系统的其他部分</li><li>可定制性: 临时性、定制性的修改某一要素来提供服务, 而不对常规用户产生影响</li><li>可配置性: 应用部署后修改配置提供新的功能</li><li>可重用性: 组件不做修改再在其他应用再使用</li></ul></li></ul><h4 id="从5种架构风格推导出HTTP-REST"><a href="#从5种架构风格推导出HTTP-REST" class="headerlink" title="从5种架构风格推导出HTTP REST"></a>从5种架构风格推导出HTTP REST</h4><p><img src="/images/rest.png" alt="rest"></p><h4 id="HTTP协议中的代理退化问题是怎么解决的"><a href="#HTTP协议中的代理退化问题是怎么解决的" class="headerlink" title="HTTP协议中的代理退化问题是怎么解决的"></a>HTTP协议中的代理退化问题是怎么解决的</h4><p><img src="/images/proxy_connection.png" alt="proxy_connection"></p><h4 id="webSocket-与-http-长连接的区别及联系"><a href="#webSocket-与-http-长连接的区别及联系" class="headerlink" title="webSocket 与 http 长连接的区别及联系"></a>webSocket 与 http 长连接的区别及联系</h4><p><a class="link"   href="https://segmentfault.com/a/1190000015122195" >WebSocket与http长连接的区别<i class="fas fa-external-link-alt"></i></a></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a class="link"   href="https://www.youtube.com/watch?v=s7Ot2o7SxXE&list=PLoZQ0sz6CBHGLlYNKB-yzDRasrAYytelS&index=8&ab_channel=MMax" >从五种架构风格推导出HTTP的REST架构<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;评估Web架构的7大属性&quot;&gt;&lt;a href=&quot;#评估Web架构的7大属性&quot; class=&quot;headerlink&quot; title=&quot;评估Web架构的7大属性&quot;&gt;&lt;/a&gt;评估Web架构的7大属性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;性能&lt;ul&gt;
&lt;li&gt;网络性能&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker初体验</title>
    <link href="https://blog.ruoan777.xyz/2022/05/28/docker%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://blog.ruoan777.xyz/2022/05/28/docker%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2022-05-28T19:10:51.000Z</published>
    <updated>2025-01-18T10:07:58.843Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 镜像</span>docker imagesdocker image lsdocker rmi <span class="token operator">&lt;</span>镜像Id<span class="token operator">></span><span class="token comment"># 容器</span>docker psdocker container lsdocker volume listdocker volume <span class="token keyword">create</span> ruoanMysqlVolumedocker run <span class="token comment">--name ruoanMysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -d --mount source=ruoanMysqlVolume,target=/var/lib/mysql  mysql</span>docker stop ruoanMysqldocker <span class="token keyword">start</span> ruoanMysqldocker rm ruoanMysqldocker container rm ruoanMysql</code></pre><h4 id="docker-mysql"><a href="#docker-mysql" class="headerlink" title="docker-mysql"></a>docker-mysql</h4><p>如果连接的是Mysql，注意如果一个主机上安装了mysql，占用了3306端口，那么如果我再启动一个mysql的话，会报端口冲突，3306端口被占用。</p><h4 id="docker-jenkins"><a href="#docker-jenkins" class="headerlink" title="docker-jenkins"></a>docker-jenkins</h4><pre class="language-sql" data-language="sql"><code class="language-sql">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>var<span class="token operator">/</span>jenkins_mountchmod <span class="token number">777</span> <span class="token operator">/</span>var<span class="token operator">/</span>jenkins_mountchmod <span class="token number">777</span> jenkins_mountdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">10240</span>:<span class="token number">8080</span> <span class="token operator">-</span>p <span class="token number">10241</span>:<span class="token number">50000</span> <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>jenkins_mount:<span class="token operator">/</span>var<span class="token operator">/</span>jenkins_home <span class="token operator">-</span>v <span class="token operator">/</span>etc<span class="token operator">/</span>localtime:<span class="token operator">/</span>etc<span class="token operator">/</span>localtime <span class="token comment">--name ruoanJenkins jenkins/jenkins</span></code></pre><h4 id="docker的挂载方式中，Bind-Mounts-和-Volumes-的区别"><a href="#docker的挂载方式中，Bind-Mounts-和-Volumes-的区别" class="headerlink" title="docker的挂载方式中，Bind Mounts 和 Volumes 的区别"></a>docker的挂载方式中，Bind Mounts 和 Volumes 的区别</h4><p><img src="/images/volumes.png" alt="volume_mounts"><br>具体操作可以参见文末参考的视频。</p><h4 id="docker-redis"><a href="#docker-redis" class="headerlink" title="docker-redis"></a>docker-redis</h4><p>安装就很简单的，注意把端口映射到宿主机端口，</p><pre class="language-sql" data-language="sql"><code class="language-sql">docker run <span class="token comment">--restart=always  -d --privileged=true -p 6379:6379 -v /Users/ruoan/develope/redis_mount/conf/redis.conf:/etc/redis/redis.conf -v /Users/ruoan/develope/redis_mount/data:/data --name ruoanRedis redis redis-server /etc/redis/redis.conf --appendonly yes</span></code></pre><p>这个顺便推荐一个mac的redis客户端 <code>Another Redis Desktop Manager</code>，UI非常的符合程序猿审美</p><p><img src="/images/redis-cli.png" alt="redis-cli"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a class="link"   href="https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP" >Docker快速入门<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.youtube.com/watch?v=-pzptvcJNh0&ab_channel=DatabaseStar" >How to Save Docker Data using Bind Mounts or Volumes<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/gf0515/article/details/80466213" >MAC上用Navicat连接本机Docker的Mysql8.0<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/fuzongle/p/12834080.html" >Docker 快速安装Jenkins完美教程 （亲测采坑后详细步骤）<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="http://www.floydhilton.com/docker/2017/03/31/Docker-ContainerHost-vs-ContainerOS-Linux-Windows.html" >Understanding Docker “Container Host” vs. “Container OS” for Linux and Windows Containers<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一些常用命令&quot;&gt;&lt;a href=&quot;#一些常用命令&quot; class=&quot;headerlink&quot; title=&quot;一些常用命令&quot;&gt;&lt;/a&gt;一些常用命令&lt;/h4&gt;&lt;pre class=&quot;language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class</summary>
      
    
    
    
    
    <category term="docker" scheme="https://blog.ruoan777.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于长轮询的实现探讨</title>
    <link href="https://blog.ruoan777.xyz/2022/05/04/%E5%85%B3%E4%BA%8E%E9%95%BF%E8%BD%AE%E8%AF%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/"/>
    <id>https://blog.ruoan777.xyz/2022/05/04/%E5%85%B3%E4%BA%8E%E9%95%BF%E8%BD%AE%E8%AF%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/</id>
    <published>2022-05-04T17:46:49.000Z</published>
    <updated>2025-01-18T10:07:58.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>五一封控在家，哪里也去不了。其它城市的小伙伴都在各种游山玩水，我就只能在家撸源码，MD。</p><p>逛 <code>Github</code> 的时候发现了这个宝藏项目，<a class="link"   href="https://github.com/longtai-cn/hippo4j" >hippo4j<i class="fas fa-external-link-alt"></i></a>，基于 美团动态线程池 设计理念开发，针对线程池增强 动态调参、监控、报警功能。<br>把它的设计框架贴过来:<br><img src="/images/hippo4j.png" alt="hippo4j"><br>五一就研究它了。作者的很多实现都是很不错的，里面有相当多的设计模式值得借鉴。<br>本文就先开一篇说下里面的长轮询实现，这也是实现动态配置的基础。</p><blockquote><p>配置中心位于 <code>Server</code> 端，它的主要作用是监控 <code>Server</code> 端线程池配置变更，实时通知到 <code>Client</code> 实例执行线程池变更流程。代码设计基于 <code>Nacos 1.x</code> 版本的 长轮询以及异步 <code>Servlet</code> 机制 实现。</p></blockquote><h3 id="关于长轮询"><a href="#关于长轮询" class="headerlink" title="关于长轮询"></a>关于长轮询</h3><p>查阅了网上的一些资料，本地跑了一个demo，实现了一个<a class="link"   href="https://github.com/ruoan777/framework/blob/master/web/src/main/java/com/ustc/ruoan/framework/web/controller/NacosLongPollingController.java" >简略版Nacos长轮询<i class="fas fa-external-link-alt"></i></a></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a class="link"   href="https://blog.csdn.net/lovexiaotaozi/article/details/102775350" >【源码分析专题】-阿里开源Nacos注册及配置中心 最佳长轮询 实现原理<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7063408526894301192" >美团动态线程池实践思路，开源了<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/longtai-cn/hippo4j" >Hippo-4J<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/alibaba/nacos/issues/4105" >nacos config长轮询的优势是什么<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;五一封控在家，哪里也去不了。其它城市的小伙伴都在各种游山玩水，我就只能在家撸源码，MD。&lt;/p&gt;
&lt;p&gt;逛 &lt;code&gt;Github&lt;/co</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务的一些讨论</title>
    <link href="https://blog.ruoan777.xyz/2022/04/07/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A8%E8%AE%BA/"/>
    <id>https://blog.ruoan777.xyz/2022/04/07/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A8%E8%AE%BA/</id>
    <published>2022-04-07T23:54:15.000Z</published>
    <updated>2025-01-18T10:07:58.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分布式事务的定义：指事务的发起者、资源及资源管理器和事务协调者分别位于分布式系统的不同节点之上。本质上来说，分布式事务就是为了保证在分布式场景下，数据操作的正确执行。</p></blockquote><h3 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h3><ol><li>DTP: <code>Distributed Transaction Processing Reference Model</code>， X&#x2F;Open 组织定义了分布式事务的模型，该模型就是DTP，DTP有以下三个重要的模块<ul><li><code>AP (Application Program)</code>: <strong>应用程序</strong>，可以理解为使用DTP分布式事务的应用程序。</li><li><code>RM (Resource Manager)</code> : 资源管理器，可以理解为<strong>事务的参与者</strong>，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制，资源管理器控制着分支事务。</li><li><code>TM (Transaction Manager)</code> : 事务管理器，负责协调和管理事务，事务管理器<strong>控制着全局事务</strong>，管理事务生命周期，并协调各个RM。全局事务是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。</li></ul></li><li>XA: XA是由X&#x2F;Open组织提出的分布式事务的规范(要想连接XA,先理解DTP), XA 规范最重要的作用就是定义 RM（资源管理器）与 TM（事务管理器）之间的交互接口。主流的关系型数据库产品都是实现了XA接口的。<br>XA规范的目的是允许的多个资源（如数据库，应用服务器，消息队列等）在同一事务中访问，这样可以使 ACID 属性跨越应用程序而保持有效。</li><li>2PC: <code>Two-Phase Commit</code>，两阶段提交，是为了保证分布式系统架构下所有节点在进行事务处理过程中能够保证原子性和一致性而设计的一种算法。</li><li>XA和2PC 的关系：两阶段提交是一种理论，XA事务 是这种理论的实现。</li></ol><h3 id="2PC理论的示意图"><a href="#2PC理论的示意图" class="headerlink" title="2PC理论的示意图"></a>2PC理论的示意图</h3><ul><li>准备阶段（又称投票阶段）：事务询问 -&gt; 执行事务 -&gt; 返回响应</li><li>提交阶段：执行事务提交 -&gt; 中断事务<br><img src="/images/2PC.png" alt="2PC"></li></ul><p><img src="/images/2PC_status.png" alt="2PC_status"><br>（该图转自<a class="link"   href="https://segmentfault.com/a/1190000012534071" >分布式事务：两阶段提交与三阶段提交<i class="fas fa-external-link-alt"></i></a>）</p><ul><li>站在协调者的角度，在发起投票之后就进入了 WAIT 状态，等待所有参与者回复各自事务执行状态，并在收到所有参与者的回复后决策下一步是发送 commit 或 rollback 信息。</li><li>站在参与者的角度，当回复完协调者的投票请求之后便进入 READY 状态（能够正常执行事务），接下去就是等待协调者最终的决策通知，一旦收到通知便可依据决策执行 commit 或 rollback 操作。</li></ul><h3 id="2PC-优缺点"><a href="#2PC-优缺点" class="headerlink" title="2PC 优缺点"></a>2PC 优缺点</h3><p>2PC 优点显而易见，那就是 原理简单，实现方便。简单也意味着很多地方不能尽善尽美，这里梳理三个比较核心的缺陷</p><ol><li>同步阻塞：无论是在第一阶段的过程中，还是在第二阶段，所有的参与者资源和协调者资源都是被锁住的，只有当所有节点准备完毕，事务协调者才会通知进行全局提交，参与者进行本地事务提交后才会释放资源。这样的过程会比较漫长，对性能影响比较大</li><li>单点故障：如果协调者出现问题，那么整个二阶段提交流程将无法运转。另外，如果协调者是在第二阶段出现了故障，那么其它参与者将会处于锁定事务资源的状态中</li><li>数据不一致性：当协调者在第二阶段向所有参与者发送 Commit 请求后，发生了局部网络异常或者协调者在尚未发送完 Commit 请求之前自身发生了崩溃，导致只有部分参与者接收到 Commit 请求，那么接收到的参与者就会进行提交事务，进而形成了数据不一致性</li></ol><h3 id="XA方案的Mysql实现"><a href="#XA方案的Mysql实现" class="headerlink" title="XA方案的Mysql实现"></a>XA方案的Mysql实现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">XAConnection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>xa<span class="token punctuation">.</span></span><span class="token class-name">XAResource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>xa<span class="token punctuation">.</span></span><span class="token class-name">Xid</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>jdbc2<span class="token punctuation">.</span>optional<span class="token punctuation">.</span></span><span class="token class-name">MysqlXADataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>jdbc2<span class="token punctuation">.</span>optional<span class="token punctuation">.</span></span><span class="token class-name">MysqlXid</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XaDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MysqlXADataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> connStr<span class="token punctuation">,</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MysqlXADataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlXADataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>connStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ds<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> connStr1 <span class="token operator">=</span> <span class="token string">"jdbc:mysql://118.89.107.162:3306/wjq"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> connStr2 <span class="token operator">=</span> <span class="token string">"jdbc:mysql://118.89.107.162:3307/wjq"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从不同数据库获取数据库数据源</span>            <span class="token class-name">MysqlXADataSource</span> ds1 <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span>connStr1<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"XXXXXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MysqlXADataSource</span> ds2 <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span>connStr2<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"XXXXXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//数据库1获取连接</span>            <span class="token class-name">XAConnection</span> xaConnection1 <span class="token operator">=</span> ds1<span class="token punctuation">.</span><span class="token function">getXAConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">XAResource</span> xaResource1 <span class="token operator">=</span> xaConnection1<span class="token punctuation">.</span><span class="token function">getXAResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Connection</span> connection1 <span class="token operator">=</span> xaConnection1<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Statement</span> statement1 <span class="token operator">=</span> connection1<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//数据库2获取连接</span>            <span class="token class-name">XAConnection</span> xaConnection2 <span class="token operator">=</span> ds2<span class="token punctuation">.</span><span class="token function">getXAConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">XAResource</span> xaResource2 <span class="token operator">=</span> xaConnection2<span class="token punctuation">.</span><span class="token function">getXAResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Connection</span> connection2 <span class="token operator">=</span> xaConnection2<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Statement</span> statement2 <span class="token operator">=</span> connection2<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建事务分支的xid</span>            <span class="token class-name">Xid</span> xid1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlXid</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">0x01</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">0x02</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Xid</span> xid2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlXid</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">0x011</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">0x012</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//事务分支1关联分支事务sql语句 </span>                <span class="token comment">// 三步走： xa start  具体语句 xa end</span>                xaResource1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>xid1<span class="token punctuation">,</span> <span class="token class-name">XAResource</span><span class="token punctuation">.</span><span class="token constant">TMNOFLAGS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> update1Result <span class="token operator">=</span> statement1<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"UPDATE accounts SET BALANCE = CAST('9700.00' AS DECIMAL) WHERE CUSTOMER_NO = '001'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                xaResource1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>xid1<span class="token punctuation">,</span> <span class="token class-name">XAResource</span><span class="token punctuation">.</span><span class="token constant">TMSUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//事务分支2关联分支事务sql语句</span>                <span class="token comment">// 三步走： xa start  具体语句 xa end</span>                xaResource2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>xid2<span class="token punctuation">,</span> <span class="token class-name">XAResource</span><span class="token punctuation">.</span><span class="token constant">TMNOFLAGS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> update2Result <span class="token operator">=</span> statement2<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user_purchase_his(CUSTOMER_NO, SERIAL_NO, AMOUNT, CURRENCY, REMARK) "</span>                        <span class="token operator">+</span> <span class="token string">" VALUES ('001', '20190303204700000001', 200, 'CNY', '购物消费')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                xaResource2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>xid2<span class="token punctuation">,</span> <span class="token class-name">XAResource</span><span class="token punctuation">.</span><span class="token constant">TMSUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 两阶段提交协议第一阶段   xa prepare</span>                <span class="token keyword">int</span> ret1 <span class="token operator">=</span> xaResource1<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>xid1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ret2 <span class="token operator">=</span> xaResource2<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>xid2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 两阶段提交协议第二阶段 xa commit | xa rollback</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">XAResource</span><span class="token punctuation">.</span><span class="token constant">XA_OK</span> <span class="token operator">==</span> ret1 <span class="token operator">&amp;&amp;</span> <span class="token class-name">XAResource</span><span class="token punctuation">.</span><span class="token constant">XA_OK</span> <span class="token operator">==</span> ret2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    xaResource1<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>xid1<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    xaResource2<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>xid2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reslut1:"</span> <span class="token operator">+</span> update1Result <span class="token operator">+</span> <span class="token string">", result2:"</span> <span class="token operator">+</span> update2Result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="消息事务（借助公司使用的消息队列QMQ来阐述）"><a href="#消息事务（借助公司使用的消息队列QMQ来阐述）" class="headerlink" title="消息事务（借助公司使用的消息队列QMQ来阐述）"></a>消息事务（借助公司使用的消息队列QMQ来阐述）</h3><p>借助关系型数据库里久经考验的事务来实现这个数据的一致性。<br>写本地消息和业务操作放在一个事务里，保证了业务和发消息的原子性，要么他们全都成功，要么全都失败。<br>具体做法：在公司所有 MySQL 实例里初始化出一个 message db，这个可以放到自动化流程中，对应用透明。然后我们只要将发消息与业务操作放到同一个 DB 事务里即可。</p><p><img src="/images/qmq.png" alt="qmq"></p><pre class="language-none"><code class="language-none">1. begin tx 开启本地事务2. do work 执行业务操作3. insert message 向同实例消息库插入消息4. end tx 事务提交5. send message 网络向 server 发送消息6. reponse server 回应消息7. delete message 如果 server 回复成功则删除消息8. scan messages 补偿任务扫描未发送消息9. send message 补偿任务补偿消息10. delete messages 补偿任务删除补偿成功的消息</code></pre><h3 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h3><p>Seata 是阿里开源的分布式事务解决方案。它其实也是从两段提交演变而来的一种分布式事务解决方案，提供了 AT、TCC、SAGA 和 XA 等事务模式，这里重点介绍 AT模式。</p><blockquote><p>Seata 在数据源做了一层代理层，所以我们使用 Seata 时，我们使用的数据源实际上用的是 Seata 自带的数据源代理 DataSourceProxy，Seata 在这层代理中加入了很多逻辑，主要是解析 SQL，把业务数据在更新前后的数据镜像组织成回滚日志，并将 undo log 日志插入 undo_log 表中，保证每条更新数据的业务 sql 都有对应的回滚日志存在。</p></blockquote><blockquote><p>这样做的好处就是，本地事务执行完可以立即释放本地事务锁定的资源，然后向 TC 上报分支状态。当 TM 决议全局提交时，就不需要同步协调处理了，TC 会异步调度各个 RM 分支事务删除对应的 undo log 日志即可，这个步骤非常快速地可以完成；当 TM 决议全局回滚时，RM 收到 TC 发送的回滚请求，RM 通过 XID 找到对应的 undo log 回滚日志，然后执行回滚日志完成回滚操作。</p></blockquote><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a class="link"   href="https://segmentfault.com/a/1190000012534071" >分布式事务：两阶段提交与三阶段提交<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/longtai-cn/framework/blob/main/docs/distributed/%E5%BD%BB%E5%BA%95%E6%8E%8C%E6%8F%A1%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A12PC%E3%80%813PC%E6%A8%A1%E5%9E%8B.md" >彻底掌握分布式事务2PC、3PC模型<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://segmentfault.com/a/1190000040321750" >分布式事务最经典的七种解决方案<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://seata.io/zh-cn/docs/dev/mode/xa-mode.html" >Seata-一款开源的分布式事务解决方案<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=2651011843&idx=1&sn=2c6591bfbb05ac3332974b030616dc88&scene=21#wechat_redirect" >开源消息队列QMQ的设计与实现理念<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.51cto.com/u_15287666/2989395" >MySQL中基于XA实现的分布式事务<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://objcoding.com/2019/07/11/seata/" >分布式事务中间件Seata的设计原理<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;分布式事务的定义：指事务的发起者、资源及资源管理器和事务协调者分别位于分布式系统的不同节点之上。本质上来说，分布式事务就是为了保证在分布式场景下，数据操作的正确执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一些基本概念&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="分布式" scheme="https://blog.ruoan777.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="事务" scheme="https://blog.ruoan777.xyz/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis与Spring整合思路的应用</title>
    <link href="https://blog.ruoan777.xyz/2022/03/28/Mybatis%E4%B8%8ESpring%E6%95%B4%E5%90%88%E6%80%9D%E8%B7%AF%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://blog.ruoan777.xyz/2022/03/28/Mybatis%E4%B8%8ESpring%E6%95%B4%E5%90%88%E6%80%9D%E8%B7%AF%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2022-03-28T23:35:46.000Z</published>
    <updated>2025-01-18T10:07:58.843Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司框架部门开发了很多中间件，包括配置中心, Redis, RPC等，极大地方便了公司程序猿的日常开发。<br>但为了更加高效地支持组内协作开发，组内大佬又在公司中间件的基础上做了很多封装，做一些定制化的操作，比如统一了日志记录的方式，统一了调用第三方API的方式等。<br>通过研究其封装原理，发现与很久之前看过的Spring与MyBatis的整合思路非常相似。</p><h3 id="Mybatis的基本原理"><a href="#Mybatis的基本原理" class="headerlink" title="Mybatis的基本原理"></a>Mybatis的基本原理</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;公司框架部门开发了很多中间件，包括配置中心, Redis, RPC等，极大地方便了公司程序猿的日常开发。&lt;br&gt;但为了更加高效地支持组内协作</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="spring" scheme="https://blog.ruoan777.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>leetcode数组专题</title>
    <link href="https://blog.ruoan777.xyz/2022/03/07/leetcode%E6%95%B0%E7%BB%84%E4%B8%93%E9%A2%98/"/>
    <id>https://blog.ruoan777.xyz/2022/03/07/leetcode%E6%95%B0%E7%BB%84%E4%B8%93%E9%A2%98/</id>
    <published>2022-03-07T23:57:37.000Z</published>
    <updated>2025-01-18T10:07:58.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-15-三数之和"><a href="#leetcode-15-三数之和" class="headerlink" title="leetcode 15. 三数之和"></a>leetcode 15. 三数之和</h2><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？请你找出所有和为 0 且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> twoSumTarget <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> twoSumRes <span class="token operator">=</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> twoSumTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>twoSumRes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sum <span class="token operator">:</span> twoSumRes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftTemp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightTemp <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> leftTemp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> rightTemp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;leetcode-15-三数之和&quot;&gt;&lt;a href=&quot;#leetcode-15-三数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode 15. 三数之和&quot;&gt;&lt;/a&gt;leetcode 15. 三数之和&lt;/h2&gt;&lt;p&gt;给你一个包含 n 个整数</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.ruoan777.xyz/tags/java/"/>
    
    <category term="leetcode" scheme="https://blog.ruoan777.xyz/tags/leetcode/"/>
    
  </entry>
  
</feed>
